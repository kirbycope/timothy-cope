[
  {
    "category": "qa",
    "slug": "the-improvement-kata",
    "title": "The Improvement Kata",
    "date": "Mar 29, 2019",
    "description": "Apply karate disipline in your process improvement.",
    "thumbnail": "/public/img/qa.png",
    "content": "<p>A kata (japanese for ‘form’) is a system of individual training exercises in karate and other martial art. The movements are first observed by the practitioner and develop teachable, repeatable habits you need to understand the process. Then the practitioner reflects on these actions and analyzes the implication of each step. Next, a goal of changing the process is considered. Finally, a plan is put in place to make those changes and respond accordingly.</p><p>The consideration of a vision or direction is referred to as ‘Strategic Alignment’. You are responsible for learning the ‘moves’ of our organization's kata. Understand what is needed for the process to improve through your observations. Focus on obstacles in the way of reaching the next condition (Target Condition) required of the process to provide ‘True North’. Consult the organization's strategic objectives, measures, target, and actions.</p><p>Grasp the current condition through ‘Process Analysis’. What you should do next is determined by a thorough and scientific analysis. Document the issue(s) and solution(s) then present it to your leadership. Carefully consider their remarks as you might have only considered the factors relating to you and not the big picture. Review the options and push for a Strategic Challenge to be set, permitting your next activities.</p><p>Goal setting is defining the next target condition. Start by defining the ideal process state; Target Condition. Document how that state can be measured and by what metrics. Each of these are your Goals to hit as part of your strategic challenge. Once your target condition is set, do not change it and don’t backtrack.</p><p>Move toward the condition, iteratively, and make adjustments to uncovered obstacles. Stick to the plan, do the plan, check the status, and act accordingly. This plan-do-check-act process as been popularized by Toyota, Deming, and Shewhart. After the target condition is met and the strategic challenge met you should disseminate this information in an easily accessible location. Toyota prefers a A3-size paper (the largest you can fax) that is posted nearest to the relevant production area. In software you may choose to document where the work is being done, like in the Git repository.</p><p>I liken any new task to learning a new kata. First, I follow the moves preset by the organization. Second, I analyze those moves and consider the pros and cons of each. Third, I set a goal of enhancing the moves after some discussion with my coach. Fourth, I perform the Plan-Do-Check-Act cycle until the Target Conditions meet the Strategic Objective. For more on this topic, check out ‘Toyota Kata’ by Mike Rother.</p>"
  },
  {
    "category": "qa",
    "slug": "how-much-testing-is-enough",
    "title": "How Much Testing is Enough?",
    "date": "Mar 15, 2019",
    "description": "The answer asks more questions.",
    "thumbnail": "/public/img/qa.png",
    "content": "<p>How much testing is enough? A popular question in the quality assurance testing field and without an answer. One might cite Parkinson’s law, ‘Work expands to fill the time available for its completion.’ You could also cite the ‘known unknowns’ and drown the person asking in doubt with uncertainty. The answer lies in asking yourself these questions before they are asked of you. </p><p>Knowing how much to test and how long that takes is data sought after by project leaders. Depending who on the team they ask, the answer is likely quite variable. A team working on a mature product might provide estimate based on historical data. Newer projects might suffer from the waste present in the Juran Trilogy as testers race to test and maintain new functionality. In these cases a more pressing timeline is needed and you might have developers waiting for the PR to work on the next piece.</p><p>Work expands to the time allotted, to paraphrase a little. As a human I must take solace knowing that I can only do what is humanly possible in a given amount of time. It is what you do with that time that make you a high performer. QA are trianned starting from ISTQB foundation level on Risk Analysis; knowing what areas are critical to test. Categorize test into risk areas and run through what you can in the time provide. If more time becomes available, the work expands into exploratory testing in hopes of catching edge case issues before an end user does.</p><p>When working on new functionality it can be easy to shrug when asked how long it will take to test. A benefit is that a developer did the work so they might be able to make an educated guess based on their experience. Whenever possible we gauge effort on past experiences, the things we know and the things we know we don’t know. In testing new functionality or integrations, one might express their estimate not in time but in timelines. The estimate goes from ‘about 2 days’ to ‘after, x, then, y, and finally z’. This is to allow room for unknown-unknowns that make everyone uneasy. Overcome this hesitation by reminding yourself and other of the unknown-knowns. You and your team, together, know how to react to things and you’ll find this phrase to be true; the whole is greater than the sum of its parts.</p><p>Take your past experiences into consideration when asking how much testing is enough. Test as much as you can in the time you have and know what it means for each permutation of that test plan. A team where each member provides different strengths, not just doing different tasks, is a key success factor in quality. If you haven’t already begin by asking yourself, ‘How much testing is enough?’</p>"
  },
  {
    "category": "dev",
    "slug": "importance-of-using-git-for-documentation",
    "title": "The Importance of Using Git for Documentation",
    "date": "Mar 01, 2019",
    "description": "Why you should keep documentaion in your project's repository.",
    "thumbnail": "/public/img/dev.png",
    "content": "<p>Why isn’t documentation a part of the Software Development Life-Cycle? Documentation in code is a hotly debated topic among developers. Some COTS (Commercial Off The Shelf) software contain solutions as well as presenting new issues. Consider what happens when you no longer own the project, will the new owner rely on your domain knowledge? I believe a solution exists within source control, most popularly GIT.</p><p>Comments in code, while contentious, are necessary when it comes to code that is not self-documenting. Business logic and integrations (where the source is unavailable) are great examples. A human looking over your code ought to understand why it is you are changing ‘x’ to ‘y’. The answers might be tribal knowledge and take little time to explain, but consider the waste caused by these interruptions and waiting for answers when the system breaks. Keeping the code understandable is a key factor to success in allowing multiple contributors.</p><p>For some documentation, such as setup and configuration you might be tempted to use the “wiki” in your companies current, like SharePoint or Confluence. While easy to use, they provide another step/barrier to the information. These systems have their own authentication, formats, and still require constant updates (usually done by hand until someone hand-rolls a solution into the APIs of these systems). How well do these systems export their data from one to the other when the company find a ‘better’ cloud solution in a couple years? If the system hasn’t made your documentation easier and more reliable then it isn’t the right solution.</p><p>A quickly emerging theme is, ‘what happens when I am gone?’ That is to say retired on the beach somewhere wanting no interuptions. As a ticket in a typical SDLC tracking system should have everything needed to accomplish the task (narrative with acceptance criteria, comps, copy, etc.), so too should the repository have the necessary documentation to stand up and support the software. This can accomplished via readme files with some markdown (which can include gif animations). As a developer browsing each important section of the code, there should exist relevant documentation; visible in the code view or the readme displayed as I navigate the web view of the repository.</p><p>A well documented repository can be the source of truth and the final deliverable. The documentation should be readily available to anyone with access to the source code. Instead of relying on linked systems, the code itself should tell you what it is doing and why. This sets you up to transfer ownership (literally or figuratively) with a few simple git commands. Now you should see the importance of using git for documentation.</p>"
  }
]
